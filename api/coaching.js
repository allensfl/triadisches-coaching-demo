// api/coaching.js - OpenAI Integration f√ºr Triadisches Coaching
export default async function handler(req, res) {
    // CORS Headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    // Handle preflight requests
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }
    
    // Only allow POST requests
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }
    
    try {
        const { step, clientInput, customPrompt, sessionId } = req.body;
        
        // Rate limiting (simple session-based)
        const rateLimitKey = sessionId || req.ip;
        const maxRequests = parseInt(process.env.RATE_LIMIT_MAX || '10');
        
        // Validate input
        if (!step || !clientInput) {
            return res.status(400).json({ 
                error: 'Missing required fields: step, clientInput' 
            });
        }
        
        // Get the appropriate system prompt for the step
        const systemPrompt = getSystemPromptForStep(step);
        
        // Create the full prompt
        const fullPrompt = customPrompt || getDefaultPromptForStep(step);
        
        // Call OpenAI API
        const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                model: 'gpt-4', // oder 'gpt-3.5-turbo' f√ºr niedrigere Kosten
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt
                    },
                    {
                        role: 'user', 
                        content: `${fullPrompt}\n\nKlient sagt: "${clientInput}"`
                    }
                ],
                max_tokens: 500,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            })
        });
        
        if (!openAIResponse.ok) {
            const error = await openAIResponse.json();
            console.error('OpenAI API Error:', error);
            return res.status(500).json({ 
                error: 'KI-Service tempor√§r nicht verf√ºgbar',
                fallback: getFallbackResponse(step)
            });
        }
        
        const data = await openAIResponse.json();
        const aiResponse = data.choices[0].message.content;
        
        // Format response for frontend
        const formattedResponse = formatResponseForStep(step, aiResponse);
        
        res.status(200).json({
            success: true,
            step: step,
            response: formattedResponse,
            metadata: {
                model: 'gpt-4',
                tokens: data.usage?.total_tokens || 0,
                timestamp: new Date().toISOString()
            }
        });
        
    } catch (error) {
        console.error('API Error:', error);
        res.status(500).json({ 
            error: 'Interner Server-Fehler',
            fallback: getFallbackResponse(req.body.step || 1)
        });
    }
}

// System-Prompts f√ºr jeden Schritt
function getSystemPromptForStep(step) {
    const basePrompt = `Du bist ein erfahrener systemischer Coach mit Expertise im triadischen Coaching-System (ICH-DU-KONTEXT). 
    
Deine Aufgabe ist es, professionelle, einf√ºhlsame und strukturierte Coaching-Antworten zu geben, die dem triadischen Ansatz folgen.

Grundprinzipien:
- ICH-Dimension: Innenwelt des Klienten (Gef√ºhle, Gedanken, Glaubenss√§tze)
- DU-Dimension: Beziehungsebene (Kommunikation, Konflikte, Verbindungen)  
- KONTEXT-Dimension: √Ñu√üere Umst√§nde (Beruf, Familie, Gesellschaft)

Antwortstil: Professionell, strukturiert, empathisch, l√∂sungsorientiert.`;

    const stepSpecific = {
        1: `\nSchritt 1 - SYSTEMCHECK: Analysiere systematisch alle drei Dimensionen (ICH/DU/KONTEXT). Identifiziere Muster, Ressourcen und Entwicklungsfelder. Strukturiere deine Antwort klar nach den drei Dimensionen.`,
        
        3: `\nSchritt 3 - AVATAR-AUFSTELLUNG: Fokussiere auf die Beziehungsdynamiken und wichtigen Personen im System des Klienten. Erkenne Koalitionen, Distanzen und Machtstrukturen. Arbeite mit r√§umlichen Metaphern.`,
        
        5: `\nSchritt 5 - BILDARBEIT: Arbeite mit Metaphern, Symbolen und bildlichen Darstellungen. Erkunde die emotionale Landschaft des Klienten. Nutze kreative und intuitive Ans√§tze zur Problemexploration.`,
        
        7: `\nSchritt 7 - AUSBALANCIERUNG: Integriere die Erkenntnisse aus allen Dimensionen. Entwickle konkrete, umsetzbare Strategien f√ºr nachhaltige Balance. Fokussiere auf R√ºckfallpr√§vention und Erfolgsmessung.`
    };
    
    return basePrompt + (stepSpecific[step] || stepSpecific[1]);
}

// Default-Prompts f√ºr jeden Schritt
function getDefaultPromptForStep(step) {
    const prompts = {
        1: `Analysiere die ICH-DU-KONTEXT-Dimensionen dieses Klienten systematisch:

1) ICH-Dimension: Emotionale Befindlichkeit, Glaubenss√§tze, Ressourcen, Blockaden
2) DU-Dimension: Beziehungsmuster, Kommunikationsstil, Konflikte, Bindungsqualit√§t  
3) KONTEXT-Dimension: Berufliches Umfeld, famili√§re Situation, √§u√üere Belastungen

Strukturiere deine Antwort klar nach diesen drei Bereichen und gib konkrete Entwicklungsempfehlungen.`,

        3: `F√ºhre eine Avatar-Aufstellung durch:

1) Identifiziere die wichtigsten Personen im System des Klienten
2) Analysiere deren Beziehungen und Positionen zueinander
3) Erkenne Koalitionen, Distanzen und Machtdynamiken
4) Arbeite mit r√§umlichen Metaphern ('nah', 'fern', 'zwischen')
5) Entwickle Empfehlungen f√ºr gew√ºnschte Systemver√§nderungen

Fokussiere auf die Beziehungsdynamiken und deren Auswirkungen.`,

        5: `Leite eine Bildarbeit-Session an:

1) Lade den Klienten ein, seine Situation bildlich zu beschreiben
2) Erkunde Farben, Formen, Atmosph√§re der inneren Landschaft
3) Frage nach Bewegung oder Stillstand im Bild
4) Erkunde die Rolle des Klienten im eigenen Bild
5) Entwickle gemeinsam ein Zielbild f√ºr die gew√ºnschte Ver√§nderung

Arbeite metaphorisch und intuitiv, um neue Perspektiven zu er√∂ffnen.`,

        7: `Entwickle eine Ausbalancierungs-Strategie:

1) Integriere alle Erkenntnisse aus ICH-DU-KONTEXT
2) Identifiziere die wichtigsten Priorit√§ten  
3) Definiere konkrete, umsetzbare erste Schritte
4) Plane R√ºckfallpr√§vention und Erfolgsmessung
5) Schaffe nachhaltige Balance zwischen allen drei Dimensionen

Achte auf √úberforderungsschutz und realistische Umsetzbarkeit.`
    };
    
    return prompts[step] || prompts[1];
}

// Response-Formatierung f√ºr jeden Schritt
function formatResponseForStep(step, rawResponse) {
    // Basis-HTML-Formatierung
    let formatted = rawResponse
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/\n\n/g, '<br><br>')
        .replace(/\n/g, '<br>');
    
    // Schritt-spezifische Formatierung
    switch(step) {
        case 1:
            // ICH/DU/KONTEXT-Struktur hervorheben
            formatted = formatted
                .replace(/ICH-Dimension:/g, '<strong style="color: var(--apple-blue)">üß† ICH-Dimension:</strong>')
                .replace(/DU-Dimension:/g, '<strong style="color: var(--apple-green)">üë• DU-Dimension:</strong>')
                .replace(/KONTEXT-Dimension:/g, '<strong style="color: var(--apple-orange)">üåç KONTEXT-Dimension:</strong>');
            break;
            
        case 3:
            // Avatar-Elemente hervorheben
            formatted = formatted.replace(/üé≠/g, '<span style="font-size: 1.2em;">üé≠</span>');
            break;
            
        case 5:
            // Bildhafte Elemente hervorheben
            formatted = formatted.replace(/(üå≤|üåø|üë•|üé®|üñºÔ∏è)/g, '<span style="font-size: 1.2em;">$1</span>');
            break;
            
        case 7:
            // Checkmarks und Strategien hervorheben
            formatted = formatted
                .replace(/‚úÖ/g, '<span style="color: var(--apple-green); font-size: 1.1em;">‚úÖ</span>')
                .replace(/‚Üí/g, '<span style="color: var(--apple-blue);">‚Üí</span>');
            break;
    }
    
    return formatted;
}

// Fallback-Responses falls API nicht verf√ºgbar
function getFallbackResponse(step) {
    const fallbacks = {
        1: "<strong>üß† ICH-Dimension:</strong> √úberforderung und emotionale Belastung erkennbar<br><br><strong>üë• DU-Dimension:</strong> Kommunikationsprobleme im Team und privat<br><br><strong>üåç KONTEXT-Dimension:</strong> Beruflicher Stress und Work-Life-Balance gest√∂rt<br><br><em>‚Üí Empfehlung: Fokus auf Stressmanagement und Kommunikation</em>",
        
        3: "üé≠ <strong>Wichtige Akteure identifiziert:</strong><br><br>‚Ä¢ Team-Mitglieder: Verschiedene Rollen und Distanzen<br>‚Ä¢ F√ºhrungsebene: Unterst√ºtzung unklar<br>‚Ä¢ Privates Umfeld: Belastung sp√ºrbar<br><br><em>‚Üí Empfehlung: Beziehungsqualit√§t st√§rken</em>",
        
        5: "üé® <strong>Bildhafte Darstellung:</strong><br><br>Die aktuelle Situation gleicht einem Labyrinth - viele Wege, aber der Ausgang ist nicht sichtbar. Die W√§nde repr√§sentieren Hindernisse und Blockaden.<br><br><em>‚Üí Zielbild: Ein klarer Pfad mit Orientierungspunkten</em>",
        
        7: "‚úÖ <strong>Ausbalancierungs-Plan:</strong><br><br>‚Ä¢ Priorit√§ten neu definieren<br>‚Ä¢ Kommunikationsroutinen etablieren<br>‚Ä¢ Selbstf√ºrsorge-Zeiten blocken<br>‚Ä¢ W√∂chentliche Reflexion einf√ºhren<br><br><em>‚Üí Nachhaltigkeit durch kleine, konsequente Schritte</em>"
    };
    
    return fallbacks[step] || fallbacks[1];
}